# Statický model programu v Javě

## Struktura softwarového projektu v Javě

* *.java soubory - v gramatice programovacího jazyka Java 1.5 představují top-level element CompilationUnit **(TODO: binární součásti projektu? class files?)**
* další soubory - resources, documentation, ...

Pro naše potřeby jsou důležité v podstatě pouze kompilační jednotky (java soubory) projektu.

Statický pohled na program - neuvažujeme běh programu. Pracujeme nad definicemi tříd, nikoliv nad jejich instancemi v paměti JVM.

Budeme pracovat nad [[gramatikou jazyka Java 1.5|https://github.com/macekond/ismath/blob/master/archanalyzer/src/main/jjtree/Java1.5.jjt]]. Java verze 6 se liší pouze úpravou standardních API poskytovaných platformou Java. Jazyk jako takový zůstává stejný.

## Typy závislostí mezi třídami

* třída A dědí ze třídy B
* třída A provádí instanciaci třídy B
* třída A používá existující intanci třídy B (pracuje s referencí na tuto třídu)

Na základě těchto závislostí lze sestavit orientovaný graf. Hrany budeme dále klasifikovat podle toho, o jakou závislost se jedná (dědičnost vs. vyvolání metody).

TBD: práce s interfaces a enums

## Neutříděné poznámky

Modifikátory přístupu (private, public, protected, package private) nám umožní "ořezat" graf závislosti tříd. Je ale možné, že pro některé druhy analýzy bude toto nežádoucí.

## TODO:

* statické třídy
* statické metody
* vnitřní třídy

## Literatura

* [[The Java Language Specification, third edition|http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html]]


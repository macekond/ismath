# Validace principů objektového návrhu v kódu (thesis)

## Součásti práce

**Struktura práce:** SDLC (requirements/analysis, design, implementation, verification/testing, maintenance). *{struktura bude postupně upřesňována a rafinována}*

* reprezentace analyzované domény - vytvoření vhodné reprezentace pro další analýzu (nějaká forma grafu) (analysis)
* definice typů závislostí a ověřovaných principů objektového návrhu (analysis)
* návrh způsobu ověřování definovaných závislostí - návrh postupů
* implementace nástroje pro podporu všech předchozích součástí
* zpracování zdrojových kódů

## Reprezentace analyzované domény (analysis)

Při analýze vycházíme ze statického modelu (fyzického modelu) tvořeného zdrojovými kódy v jazyku Java. Tento model je dále rozebírán v sekci [[Statický model programu v Javě|https://github.com/macekond/ismath/wiki/static_model_of_computation_in_java]].

## Definice typů závislostí a ověřovaných principů objektového návrhu 

### Rešerše

**Principy objektového návrhu:**

* [[Pescio, C.; , "Principles versus patterns," Computer , vol.30, no.9, pp.130-131, Sep 1997
doi: 10.1109/2.612257|http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=612257&isnumber=13382]]

**Low coupling and high cohesion:**

* základní informace o coupling a cohesion na wikipedii:
    * [[Coupling|http://en.wikipedia.org/wiki/Coupling_(computer_programming)]]
    * [[Cohesion|http://en.wikipedia.org/wiki/Cohesion_(computer_science)]]
* [[Measuring coupling and cohesion in object-oriented systems|http://www.isys.uni-klu.ac.at/PDF/1995-0043-MHBM.pdf]]
* [[Defining and validating high-level design metrics|http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.31.4744&rep=rep1&type=pdf]]
* [[Byung-Kyoo Kang; Bieman, J.M.; , "Design-level cohesion measures: derivation, comparison, and applications," Computer Software and Applications Conference, 1996. COMPSAC '96., Proceedings of 20th International , vol., no., pp.92-97, 21-23 Aug 1996|http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=542431&isnumber=11365]]
* [[Bieman, J.M.; Byung-Kyoo Kang; , "Measuring design-level cohesion," Software Engineering, IEEE Transactions on , vol.24, no.2, pp.111-124, Feb 1998|http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=666825&isnumber=14664]]

**TBD:** napsat nějaká pojednání o klasifikaci coupling and cohesion (čerpat z článků a citovat)

**Demeter law:**

* [[Assuring Good Style for Object-Oriented Programs|http://portal.acm.org/citation.cfm?id=624870]]
* [[Adaptive Object-Oriented Software The Demeter Method|http://www.google.cz/url?sa=t&source=web&cd=3&sqi=2&ved=0CCoQFjAC&url=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.94.8349%26rep%3Drep1%26type%3Dpdf&rct=j&q=demeter%20software%20object%20oriented&ei=MeTOTPihHI7AswbpufiWCA&usg=AFQjCNHnRixmCYTZrJVPF2OCEcbooajq4A&cad=rja]]
* [[The Law of Demeter Is Not A Dot Counting Exercise|http://bit.ly/9tCObJ]] - pěkný popularizační článek na úvod
* [[Object-oriented programming: an objective sense of style|http://portal.acm.org/ft_gateway.cfm?id=62113&type=pdf&coll=GUIDE&dl=GUIDE&CFID=111192652&CFTOKEN=98650016]]
* [[Formulations and benefits of the law of demeter|http://portal.acm.org/citation.cfm?id=643603.643608]]
* [[Demeter: Aspect-Oriented Software Development|http://www.ccs.neu.edu/research/demeter/]]
* [[A case for statically executable advice: checking the law of demeter with AspectJ|http://portal.acm.org/citation.cfm?id=643603.643608]]

**TBD:**

* define/analyze dependency types (inheritance, method invocation, instance creation)
* define/analyze properties of low-coupling and high-cohesion design
* analyze Demeter law
* consider other object oriented principles which should hold

## Návrh způsobu ověřování definovaných závislostí
**TBD:** návrh postupů

Přístupy:

* aplikace poznatků z teorie grafů
* vyhodnocování vlastních pravidel
* použití data miningu (klasifikace modelů)

## Implementace nástroje pro podporu všech předchozích součástí

**TBD:**

* write complete workflow of the supporting tool implementation
* phases: analysis


## TODO

* source code references resolution/resolving
* dependency graph construction
* dependency graph visualization
* GUI design and implementation
* graph analysis
* graph data mining

## Literatura

* Applying UML and patterns : an introduction to object-oriented analysis and design and iterative development / Craig Larman. -- 3rd ed.. -- Upper Saddle River : Prentice Hall PTR, c2005. -- xxv, 703 s. : il.
* [[Java SE 6 Documentation|http://download.oracle.com/javase/6/docs/index.html]]
* [[NetBeans API Javadoc|http://bits.netbeans.org/6.9.1/javadoc/]]
